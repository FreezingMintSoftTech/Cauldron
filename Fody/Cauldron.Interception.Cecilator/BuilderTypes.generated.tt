<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="WindowsBase" #>
<#@ assembly name="PresentationFramework" #>
<#@ assembly name="$(SolutionDir)Win32\\Cauldron.Activator\\bin\\Release\\Cauldron.Activator.dll" #>
<#@ assembly name="$(SolutionDir)Win32\\Cauldron.Interception\\bin\\Release\\Cauldron.Interception.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.Threading" #>
<#@ output extension=".cs" #>

<#
 
	var types = new Type[]
	{
		typeof(System.Runtime.CompilerServices.AsyncTaskMethodBuilder),
		typeof(System.Runtime.CompilerServices.AsyncTaskMethodBuilder<>),
		typeof(decimal),
		typeof(IEnumerable<>),
		typeof(NotSupportedException),
		typeof(IEnumerable),
		typeof(IDisposable),
		typeof(int),
		typeof(uint),
		typeof(string), 
		typeof(IList<>),
		typeof(IDictionary),
		typeof(IDictionary<,>),
		typeof(Dictionary<,>),
		typeof(ICollection<>),
		typeof(IList),
		typeof(List<>),
		typeof(bool),
		typeof(long),
		typeof(ulong),
		typeof(short),
		typeof(ushort),
		typeof(float),
		typeof(double),
		typeof(byte),
		typeof(sbyte),
		typeof(char),
		typeof(Convert),
		typeof(DateTime),
		typeof(Enum),
		typeof(Enumerable),
		typeof(MethodBase),
		typeof(Task),
		typeof(Task<>),
		typeof(Type),
		typeof(Nullable),
		typeof(object),
		typeof(Nullable<>),
		typeof(Exception),
		typeof(IntPtr),
		typeof(UIntPtr),
		typeof(Array),
		typeof(EventArgs),
		typeof(EventHandler<>),
		typeof(EventHandler),
		typeof(Monitor),
		typeof(Uri),
		typeof(Cauldron.Activator.ComponentConstructorAttribute),
		typeof(Cauldron.Activator.ComponentAttribute),
		typeof(Cauldron.IDisposableObject),
		typeof(Cauldron.Activator.IFactoryTypeInfo),
		typeof(Cauldron.Activator.IFactoryExtension),
		typeof(Cauldron.Activator.GenericComponentAttribute),
		typeof(System.Windows.Application),
		typeof(System.Windows.ResourceDictionary),
		typeof(Cauldron.Interception.ExtensionsInterception),
		typeof(Cauldron.ExtensionsReflection),
		typeof(Cauldron.Activator.Factory),
		typeof(Cauldron.Interception.IConstructorInterceptor),
		typeof(Cauldron.Interception.IMethodInterceptor),
		typeof(Cauldron.Interception.InterceptionRuleAttribute),
		typeof(Cauldron.Interception.InterceptorOptionsAttribute),
		typeof(Cauldron.Interception.IPropertyGetterInterceptor),
		typeof(Cauldron.Interception.IPropertyInterceptorInitialize),
		typeof(Cauldron.Interception.IPropertySetterInterceptor),
		typeof(Cauldron.Interception.ISimpleMethodInterceptor),
		typeof(Cauldron.Interception.IMethodInterceptorOnExit),
		typeof(Cauldron.Interception.ISyncRoot),
		typeof(Cauldron.Interception.PropertyInterceptionInfo),
	};

	string GenerateCommas(string count)
	{
		if(int.TryParse(count, out int value))
		{
			var data = new string[value];

			if(data.Length == 0)
				return "";

			for(int i=0; i< data.Length; i++)
				data[i] = "";

			return string.Join(",", data);
		}
		
		return "";
	}

	string StringRepresentationToCSharp(string typeName)
	{
		var pos = typeName.IndexOf('`');

		if(pos >= 0)
		{
			var name = typeName.Substring(0, pos);
			var generics = typeName.IndexOf('[') > pos ? typeName.Substring(pos + 1, typeName.IndexOf('[') - pos +1) : typeName.Substring(pos + 1);

			return name + "<" + GenerateCommas(generics) + ">";
		}

		return typeName;
	}

	string StringRepresentation(string typeName)
	{
		var blaPos = typeName.IndexOf('[');
		return typeName.Substring(0, blaPos < 0 ? typeName.Length : blaPos);
	}
	
	string StringRepresentationToCSharpFull(string typeName)
	{
		var pos = typeName.IndexOf('`');

		if(pos >= 0)
		{
			var name = typeName.Substring(0, pos);
			var blaPos = typeName.IndexOf('[');
			var generics = typeName.Substring(pos, blaPos - pos);

			return typeName.Replace(generics, "").Replace("[", "{").Replace("]", "}");
		}

		return typeName;
	}	

	bool IsValidParameter(IEnumerable<ParameterInfo> info)
	{
		foreach(var item in info)
		{
			if(item.ParameterType.IsByRef)
				return false;

			if(item.IsIn)
				return false;

			if(item.IsOut)
				return false;

			if(item.IsRetval)
				return false;

			if(item.ParameterType.Name.IndexOf("*") >= 0)
				return false;

			if(item.ParameterType.FullName.StartsWith("Cauldron."))
				return false;
		}

		return true;
	}

	string CleanName(string value)
	{
		return value
			.Replace('<','_')
			.Replace('>','_')
			.Replace('[','_')
			.Replace(']','_')
			.Replace('.','_');
	}
#>

/*
	Generated :)
*/


using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Reflection;
using System.Threading;
using Mono.Cecil;
using System.Runtime.CompilerServices;

namespace Cauldron.Interception.Cecilator
{    	
    /// <summary>
    /// Provides predifined types for Cecilator
    /// </summary>
	public static class BuilderTypes
    {
	
		#region Void
        private static BuilderType _Void;
		
        /// <summary>
        /// Gets <see cref="BuilderType"/> representing void. 
        /// </summary>
        public static BuilderType Void
        {
            get
            {
                if (_Void == null) _Void = Builder.Current.GetType("System.Void");
                return _Void;
            }
        }

		#endregion
		
		<#
		foreach(var type in types.OrderBy(x => x.Name) )
		{
			var variableName = "_" + type.Name.Replace('`', '_').ToLower();
		#>
		
		#region <#=type.Name#>
        private static BuilderType<#=type.Name.Replace("`", "")#> <#=variableName#>;
		
        /// <summary>
        /// Gets <see cref="BuilderType"/> representing <see cref="<#=StringRepresentationToCSharpFull(type.ToString())#>"/>. 
        /// </summary>
        public static BuilderType<#=type.Name.Replace("`", "")#> <#=type.Name.Replace("`", "")#>
        {
            get
            {
                if (<#=variableName#> == null) <#=variableName#> = new BuilderType<#=type.Name.Replace("`", "")#>(Builder.Current.GetType("<#=StringRepresentation(type.FullName)#>").Import());
                return <#=variableName#>;
			}
        }

		#endregion
		<#
		}
		#>

	}

	/// <exclude />
	public class TypeSystemExBase 
	{
		/// <exclude />
		protected readonly BuilderType builderType;

		/// <exclude />
        protected TypeSystemExBase(BuilderType builderType)
		{
			this.builderType = builderType;
		}

		/// <exclude />
		public BuilderType BuilderType => this.builderType.Import();
	}		
	<#
	foreach(var type in types.OrderBy(x => x.Name) )
	{
		var variableName = "_" + type.Name.Replace('`', '_').ToLower();
	#>
		
    /// <summary>
    /// Provides a wrapper class for <see cref="<#=StringRepresentationToCSharpFull(type.ToString())#>"/>
    /// </summary>
    public partial class BuilderType<#=type.Name.Replace("`", "")#> : TypeSystemExBase
	{
        internal BuilderType<#=type.Name.Replace("`", "")#>(BuilderType builderType) : base(builderType)
		{
		}

		/// <exclude />
		public static implicit operator BuilderType(BuilderType<#=type.Name.Replace("`", "")#> value) => value.builderType.Import();
		
		/// <exclude />
		public static implicit operator TypeReference(BuilderType<#=type.Name.Replace("`", "")#> value) => Builder.Current.Import((TypeReference)value.builderType);
			
		<#
		// Methods
		var constructors = type
				.GetConstructors()
                .GroupBy(x => x.Name)
                .Select(x => new { Name = x.Key, Items = x.ToArray() })
                .Select(x => x.Items.Select(y => new MethodInfos(y, x.Items.Length == 1)))
                .SelectMany(x => x)
                .Where(x => !x.IsGenericMethodDefinition && !x.ContainsGenericParameters && x.IsValidParameter)
                .GroupBy(x => x.IsSingle ? x.Name : x.Name + x.Parameters.Length)
                .Select(x => x.Distinct(new MethodInfosEqualityComparer()).ToArray());

		var methodGroups = type
            .GetMethods()
                .GroupBy(x => x.Name)
                .Select(x => new { Name = x.Key, Items = x.ToArray() })
                .Select(x => x.Items.Select(y => new MethodInfos(y, x.Items.Length == 1)))
                .SelectMany(x => x)
                .Where(x => !x.IsGenericMethodDefinition && !x.ContainsGenericParameters && x.IsValidParameter)
                .GroupBy(x => x.IsSingle ? x.Name : x.Name + x.Parameters.Length)
                .Select(x => x.Distinct(new MethodInfosEqualityComparer()).ToArray()).Concat(constructors);
			
		foreach(var group in methodGroups)
		{
			for(int i=0; i< group.Length; i++)
			{
				var itemParameters = group[i].Parameters;
		#>		
		private Method var_<#= $"{CleanName(group[i].Name).ToLower()}_{i}_{itemParameters.Length}"#>;
		<# } #>

		/// <summary>
		/// Represents the following method:
		/// <para />
		<#foreach(var item in group)
		{#>/// <#=item.Fullname#><para/>
		<#}#>/// </summary>
		<#if(group[0].IsSingle){#>
public Method GetMethod_<#=CleanName(group[0].Name)#>()
		{
			if(this.var_<#= $"{CleanName(group[0].Name).ToLower()}_{0}_{group[0].Parameters.Length}"#> == null)
				this.var_<#= $"{CleanName(group[0].Name).ToLower()}_{0}_{group[0].Parameters.Length}"#> = this.builderType.GetMethod("<#=group[0].RealName#>", <#=group[0].Parameters.Length#>, true);

			return this.var_<#= $"{CleanName(group[0].Name).ToLower()}_{0}_{group[0].Parameters.Length}"#>.Import();
		}
		<#}else{#>
public Method GetMethod_<#=CleanName(group[0].Name)#>(<#=string.Join(", ", group[0].Parameters.Select(x => "TypeReference p" + x.Name).ToArray()) #>)
		{
			<# if(group.Length == 1 && group[0].Parameters.Length == 0) { #>
			
			if(this.var_<#= $"{CleanName(group[0].Name).ToLower()}_{0}_{group[0].Parameters.Length}"#> == null)
				this.var_<#= $"{CleanName(group[0].Name).ToLower()}_{0}_{group[0].Parameters.Length}"#> = this.builderType.GetMethod("<#=group[0].RealName#>", true);

			return this.var_<#= $"{CleanName(group[0].Name).ToLower()}_{0}_{group[0].Parameters.Length}"#>.Import();
			<#}#>			
			<# if(group.Length == 1 && group[0].Parameters.Length > 0) { #>
			
			if(this.var_<#= $"{CleanName(group[0].Name).ToLower()}_{0}_{group[0].Parameters.Length}"#> == null)
				this.var_<#= $"{CleanName(group[0].Name).ToLower()}_{0}_{group[0].Parameters.Length}"#> = this.builderType.GetMethod("<#=group[0].RealName#>", true, <#=string.Join(", ", group[0].Parameters.Select(x => "p" + x.Name).ToArray()) #>);
			
			return this.var_<#= $"{CleanName(group[0].Name).ToLower()}_{0}_{group[0].Parameters.Length}"#>.Import();
			<#}#>
			<# 
				if(group.Length > 1) 
				{
					for(int i=0; i < group.Length; i++)
					{
						var itemParameters = group[i].Parameters;
			#>

			if(<#=string.Join(" && ", itemParameters.Select(x => $"typeof({StringRepresentationToCSharp(x.ParameterType.FullName)}).AreEqual(p{group[0].Parameters[x.Position].Name})")) #>)
			{
				if(this.var_<#= $"{CleanName(group[i].Name).ToLower()}_{i}_{itemParameters.Length}"#> == null)
					this.var_<#= $"{CleanName(group[i].Name).ToLower()}_{i}_{itemParameters.Length}"#> = this.builderType.GetMethod("<#=group[i].RealName#>", true, <#=string.Join(", ", group[0].Parameters.Select(x => "p" + x.Name).ToArray()) #>);
			
				return this.var_<#= $"{CleanName(group[i].Name).ToLower()}_{i}_{itemParameters.Length}"#>.Import();
			}
			<#
				}
			#>

			throw new Exception("Method with defined parameters not found.");
			<#
			}
			#>

		}
		<#}#>
		<#
		}
		#>
	}

	<#
	}
	#>
}

<#+


    internal class MethodInfosEqualityComparer : IEqualityComparer<MethodInfos>
    {
        public bool Equals(MethodInfos x, MethodInfos y) => x.Name == y.Name && y.Parameters.SequenceEqual(x.Parameters);

        public int GetHashCode(MethodInfos obj) => obj.Name.GetHashCode();
    }

    internal class MethodInfos
    {
        public MethodInfos(MethodInfo methodInfo, bool isSingle)
        {
            this.RealName = methodInfo.Name;
            this.Name = methodInfo.Name.Replace(".", "");
            this.VariableName = "_" + methodInfo.Name.Replace(".", "").ToLower();
            this.Parameters = methodInfo.GetParameters();
            this.IsSingle = isSingle;
            this.IsGenericMethodDefinition = methodInfo.IsGenericMethodDefinition;
            this.ContainsGenericParameters = methodInfo.ContainsGenericParameters;
            this.Fullname = methodInfo.ToString();
			this.IsConstructor = false;
        }

        public MethodInfos(ConstructorInfo constructorInfo, bool isSingle)
        {
            this.RealName = constructorInfo.Name;
            this.Name = constructorInfo.Name.Replace(".", "");
            this.VariableName = "_" + constructorInfo.Name.ToLower();
            this.Parameters = constructorInfo.GetParameters();
            this.IsSingle = isSingle;
            this.IsGenericMethodDefinition = constructorInfo.IsGenericMethodDefinition;
            this.ContainsGenericParameters = constructorInfo.ContainsGenericParameters;
            this.Fullname = constructorInfo.ToString();
			this.IsConstructor = true;
        }

        public bool ContainsGenericParameters { get; }
        public bool IsGenericMethodDefinition { get; }
        public bool IsSingle { get; }
        public string Fullname { get; }

        public bool IsValidParameter
        {
            get
            {
                foreach (var item in this.Parameters)
                {
                    if (item.ParameterType.IsByRef)
                        return false;

                    if (item.IsIn)
                        return false;

                    if (item.IsOut)
                        return false;

                    if (item.IsRetval)
                        return false;

                    if (item.ParameterType.Name.IndexOf("*") >= 0)
                        return false;
						
                    if (item.ParameterType.FullName.StartsWith("Cauldron.") && !this.IsSingle)
                        return false;
                }

                return true;
            }
        }

		public bool IsConstructor { get; }
        public string Name { get; }
        public string RealName { get; }
        public ParameterInfo[] Parameters { get; }
        public string VariableName { get; }

    }	
	
	#>